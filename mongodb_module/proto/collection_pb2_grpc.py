# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from mongodb_module.proto import collection_pb2 as mongodb__module_dot_proto_dot_collection__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in mongodb_module/proto/collection_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CollectionServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InsertOne = channel.unary_unary(
                '/collection.CollectionServer/InsertOne',
                request_serializer=mongodb__module_dot_proto_dot_collection__pb2.DocRequest.SerializeToString,
                response_deserializer=mongodb__module_dot_proto_dot_collection__pb2.IdResponse.FromString,
                _registered_method=True)
        self.InsertMany = channel.unary_unary(
                '/collection.CollectionServer/InsertMany',
                request_serializer=mongodb__module_dot_proto_dot_collection__pb2.DocListRequest.SerializeToString,
                response_deserializer=mongodb__module_dot_proto_dot_collection__pb2.IdListResponse.FromString,
                _registered_method=True)
        self.GetTag = channel.unary_unary(
                '/collection.CollectionServer/GetTag',
                request_serializer=mongodb__module_dot_proto_dot_collection__pb2.TagRequest.SerializeToString,
                response_deserializer=mongodb__module_dot_proto_dot_collection__pb2.DocResponse.FromString,
                _registered_method=True)
        self.GetOne = channel.unary_unary(
                '/collection.CollectionServer/GetOne',
                request_serializer=mongodb__module_dot_proto_dot_collection__pb2.IdRequest.SerializeToString,
                response_deserializer=mongodb__module_dot_proto_dot_collection__pb2.DocResponse.FromString,
                _registered_method=True)
        self.GetMany = channel.unary_unary(
                '/collection.CollectionServer/GetMany',
                request_serializer=mongodb__module_dot_proto_dot_collection__pb2.QueryRequest.SerializeToString,
                response_deserializer=mongodb__module_dot_proto_dot_collection__pb2.DocListResponse.FromString,
                _registered_method=True)
        self.UpdateMany = channel.unary_unary(
                '/collection.CollectionServer/UpdateMany',
                request_serializer=mongodb__module_dot_proto_dot_collection__pb2.UpdateManyRequest.SerializeToString,
                response_deserializer=mongodb__module_dot_proto_dot_collection__pb2.CountResponse.FromString,
                _registered_method=True)
        self.DeleteMany = channel.unary_unary(
                '/collection.CollectionServer/DeleteMany',
                request_serializer=mongodb__module_dot_proto_dot_collection__pb2.QueryRequest.SerializeToString,
                response_deserializer=mongodb__module_dot_proto_dot_collection__pb2.CountResponse.FromString,
                _registered_method=True)
        self.Aggregate = channel.unary_unary(
                '/collection.CollectionServer/Aggregate',
                request_serializer=mongodb__module_dot_proto_dot_collection__pb2.AggregateRequest.SerializeToString,
                response_deserializer=mongodb__module_dot_proto_dot_collection__pb2.DocListResponse.FromString,
                _registered_method=True)


class CollectionServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InsertOne(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertMany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOne(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Aggregate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CollectionServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InsertOne': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertOne,
                    request_deserializer=mongodb__module_dot_proto_dot_collection__pb2.DocRequest.FromString,
                    response_serializer=mongodb__module_dot_proto_dot_collection__pb2.IdResponse.SerializeToString,
            ),
            'InsertMany': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertMany,
                    request_deserializer=mongodb__module_dot_proto_dot_collection__pb2.DocListRequest.FromString,
                    response_serializer=mongodb__module_dot_proto_dot_collection__pb2.IdListResponse.SerializeToString,
            ),
            'GetTag': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTag,
                    request_deserializer=mongodb__module_dot_proto_dot_collection__pb2.TagRequest.FromString,
                    response_serializer=mongodb__module_dot_proto_dot_collection__pb2.DocResponse.SerializeToString,
            ),
            'GetOne': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOne,
                    request_deserializer=mongodb__module_dot_proto_dot_collection__pb2.IdRequest.FromString,
                    response_serializer=mongodb__module_dot_proto_dot_collection__pb2.DocResponse.SerializeToString,
            ),
            'GetMany': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMany,
                    request_deserializer=mongodb__module_dot_proto_dot_collection__pb2.QueryRequest.FromString,
                    response_serializer=mongodb__module_dot_proto_dot_collection__pb2.DocListResponse.SerializeToString,
            ),
            'UpdateMany': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMany,
                    request_deserializer=mongodb__module_dot_proto_dot_collection__pb2.UpdateManyRequest.FromString,
                    response_serializer=mongodb__module_dot_proto_dot_collection__pb2.CountResponse.SerializeToString,
            ),
            'DeleteMany': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMany,
                    request_deserializer=mongodb__module_dot_proto_dot_collection__pb2.QueryRequest.FromString,
                    response_serializer=mongodb__module_dot_proto_dot_collection__pb2.CountResponse.SerializeToString,
            ),
            'Aggregate': grpc.unary_unary_rpc_method_handler(
                    servicer.Aggregate,
                    request_deserializer=mongodb__module_dot_proto_dot_collection__pb2.AggregateRequest.FromString,
                    response_serializer=mongodb__module_dot_proto_dot_collection__pb2.DocListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'collection.CollectionServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('collection.CollectionServer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CollectionServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InsertOne(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/collection.CollectionServer/InsertOne',
            mongodb__module_dot_proto_dot_collection__pb2.DocRequest.SerializeToString,
            mongodb__module_dot_proto_dot_collection__pb2.IdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InsertMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/collection.CollectionServer/InsertMany',
            mongodb__module_dot_proto_dot_collection__pb2.DocListRequest.SerializeToString,
            mongodb__module_dot_proto_dot_collection__pb2.IdListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/collection.CollectionServer/GetTag',
            mongodb__module_dot_proto_dot_collection__pb2.TagRequest.SerializeToString,
            mongodb__module_dot_proto_dot_collection__pb2.DocResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOne(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/collection.CollectionServer/GetOne',
            mongodb__module_dot_proto_dot_collection__pb2.IdRequest.SerializeToString,
            mongodb__module_dot_proto_dot_collection__pb2.DocResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/collection.CollectionServer/GetMany',
            mongodb__module_dot_proto_dot_collection__pb2.QueryRequest.SerializeToString,
            mongodb__module_dot_proto_dot_collection__pb2.DocListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/collection.CollectionServer/UpdateMany',
            mongodb__module_dot_proto_dot_collection__pb2.UpdateManyRequest.SerializeToString,
            mongodb__module_dot_proto_dot_collection__pb2.CountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/collection.CollectionServer/DeleteMany',
            mongodb__module_dot_proto_dot_collection__pb2.QueryRequest.SerializeToString,
            mongodb__module_dot_proto_dot_collection__pb2.CountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Aggregate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/collection.CollectionServer/Aggregate',
            mongodb__module_dot_proto_dot_collection__pb2.AggregateRequest.SerializeToString,
            mongodb__module_dot_proto_dot_collection__pb2.DocListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
